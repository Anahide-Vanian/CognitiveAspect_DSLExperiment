#from behave import fixture
import json
from behave.model import Scenario
#Libraries linked with Arduino 
import sys, time
import random
import serial
import io

f = open("Environment.json")
data = json.load(f)


        
def before_all(context):
    print("Setting up Environment...")
    # Send setup command to Arduino
    
    context.serial_port = "COM9"

    context.curSerial = serial.Serial(context.serial_port, 115200, timeout=1)
    
    #discarding the first data waiting to be read.
    time.sleep(10)
    context.curSerial.flushInput()
    
    #params related to the entities
    context.obj_color = "None"
    context.magnet_state = "None"   
    
    #motor speeds
    context.speed1 = 100
    context.speed2 = 100
    context.speed3 = 100
    context.speed4 = 10

def before_feature(context, feature): 
    pass

def after_feature(context, feature):
    pass

def before_scenario(context, scenario): 
    pass

def after_scenario(context, scenario):
    pass


def printArduinotext(context, text):
    
    context.curSerial.write(text.encode('utf-8'))
    #time.sleep(10)
    line = context.curSerial.readline().decode('utf-8')
    line  = line + "hey"
    print(line)


def askArduinoMotorValues(context, motor_id):
    # Construct the JSON command with proper formatting
    command = {"cmd": "getServoPos", "id": motor_id}
    json_string = json.dumps(command) # Serialize into JSON string
    # Write the JSON command to the serial port
    writeText2SerialPort(context, json_string)
    
    # Read the response from the serial port
    response_dict = readTextFromSerialPort(context)
    
    try:
        
        # Extract the "value" from the response
        motor_value = response_dict.get("value")
        #print("motor_value", motor_value)
        return motor_value
    
    except json.decoder.JSONDecodeError as e:
        # Handle JSON decoding error
        print("Error decoding JSON:", e)
        return None
    
    
def askArduinoRelayValue(context):
    # Construct the JSON command with proper formatting
    command = {"cmd": "getRelayValue"}
    json_string = json.dumps(command) # Serialize into JSON string
    # Write the JSON command to the serial port
    writeText2SerialPort(context, json_string)
    
    # Read the response from the serial port
    response_dict = readTextFromSerialPort(context)
    
    try:
        relay_value = response_dict.get("value")
        #print("motor_value", motor_value)
        return relay_value
    
    except json.decoder.JSONDecodeError as e:
        # Handle JSON decoding error
        print("Error decoding JSON:", e)
        return None
    
    
    
    
def askArduinoColorValues(context):
    # Construct the JSON command with proper formatting
    command = {"cmd": "getColor"}
    json_string = json.dumps(command) # Serialize into JSON string
    
    # Write the JSON command to the serial port
    writeText2SerialPort(context, json_string)
    
    # Read the response from the serial port
    response_dict = readTextFromSerialPort(context)
    
    # Extract the "value" from the response
    r_value = response_dict.get("r")
    g_value = response_dict.get("g")
    b_value = response_dict.get("b")
    return (r_value, g_value, b_value)
    
    

def position2MotorValues(name):
    locations = data["Positions"]
    coordinate = locations[name]

    return coordinate

def setJsonColorValue(color_value):
    
    # Step 2: Modify the data structure
    data["Object"]["Color"] = color_value

    # Step 3: Write the modified data structure back to the JSON file
    with open("Environment.json", 'w') as file:
    json.dump(data, file, indent=4)  # indent=4 for pretty formatting (optional)




def writeText2SerialPort(context, text):

    context.curSerial.write(text.encode())
    time.sleep(1)
    
def readTextFromSerialPort(context):
 

    while True:
        # Read a line from the serial port
        line = context.curSerial.readline().decode().strip()
        
        # Check if the line is not empty
        if line:
            # Print the received data
            print('Received from Arduino:', line)
            # Assuming the received data is a JSON string
            # You can add your JSON parsing logic here if needed

            parsed_json = json.loads(line)#transforms strings to dictionary
            
            if(parsed_json.get("cmd") == "debug" or parsed_json.get("value") == -1):
                continue 
            else:
                return parsed_json
                

    #return line
    




