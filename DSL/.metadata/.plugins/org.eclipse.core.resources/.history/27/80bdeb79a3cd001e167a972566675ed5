from behave import when, given, then
import behave
from behave.model_core import Status
import time
import environment as env 
import os
import json
#modif


@given(u'the position of the robot "{identifier}" is "{position}"')
def step_impl(context, identifier : str, position):
    
    #where is the robot actually 
    actual_angle1 = env.askArduinoMotorValues(context, 1)#value motor1
    actual_angle2 = env.askArduinoMotorValues(context, 2)#value motor2
    actual_angle3 = env.askArduinoMotorValues(context, 3)#value motor3
    actual_angle4 = env.askArduinoMotorValues(context, 4)#value motor3   
    
    #check if we are in the right position    
    target_angles = env.position2MotorValues(position)
    
    #difference with servo values for default pos
    threshold = 4
    condition1 = abs(actual_angle1 - target_angles[0]) > threshold
    condition2 = abs(actual_angle2 - target_angles[1]) > threshold
    condition3 = abs(actual_angle3 - target_angles[2]) > threshold
    condition4 = abs(actual_angle4 - target_angles[3]) > threshold
    
    #we are not at default if one of the conditions not met
    if (condition1 or condition2 or condition3 or condition4):
        
        text1 = "{\"cmd\":\"begin\”}" 
        text2 = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angles[1]) + ", \"speed\":context.speed2, \"id\":2}"
        text3 = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angles[0]) + ", \"speed\":context.speed1, \"id\":1}"
        text4 = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angles[2]) + ", \"speed\":context.speed3, \"id\":3}"
        text5 = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angles[3]) + ", \"speed\":context.speed4, \"id\":4}"
        text6 = "{\"cmd\":\"end\”}"
        
        env.writeText2SerialPort(context, text1)  
        env.writeText2SerialPort(context, text2)#1
        time.sleep(2)
        env.writeText2SerialPort(context, text4)#motor 3
        time.sleep(2)  
        env.writeText2SerialPort(context, text5)#motor 4 first to avoid collision 
        time.sleep(2)
        env.writeText2SerialPort(context, text3)#motor 2 first to avoid collision 
        time.sleep(2)
        env.writeText2SerialPort(context, text6)
    


@when('the robot "{identifier}" moves to position "{position}"')
def step_when(context, identifier : str, position):
    
    #where is the robot actually 
    actual_angle1 = env.askArduinoMotorValues(context, 1)#value motor1
    actual_angle2 = env.askArduinoMotorValues(context, 2)#value motor2
    actual_angle3 = env.askArduinoMotorValues(context, 3)#value motor3
    actual_angle4 = env.askArduinoMotorValues(context, 4)#value motor3 
        
    #wher we want to go 
    target_angles = env.position2MotorValues(position)    
    
    """
    print("time1",time1)
    print("time2",time2)
    print("time3",time3)
    print("time4",time4)
    
    """
    #before action put two servos in safe config
    
    text2 = "{\"cmd\":\"setServoPos\",\"value\": 500, \"speed\":" + str(context.speed2) +", \"id\":2}"
    text3 = "{\"cmd\":\"setServoPos\",\"value\": 500, \"speed\":" + str(context.speed3) +",\"id\":3}" 
    
    env.writeText2SerialPort(context, text2)#2
    time.sleep(2)
    env.writeText2SerialPort(context, text3)#motor 3
    time.sleep(2) 
    
    """
    #calculation of the time required to move the robot
    time1 = abs(actual_angle1 - target_angles[0]) / context.speed1
    time2 = abs(actual_angle2 - target_angles[1]) / context.speed2
    time3 = abs(actual_angle3 - target_angles[2]) / context.speed3
    time4 = abs(actual_angle4 - target_angles[3]) / context.speed4
    
    """
    
    #move the robot
    text1 = "{\"cmd\":\"begin\”}" 
    text2 = "{\"cmd\": \"setServoPos\",\"value\": " + str(target_angles[0]) + ", \"speed\":" + str(context.speed1) +", \"id\":1}"
    text3 = "{\"cmd\":\"setServoPos\",\"value\": " + str(target_angles[1]) + ",  \"speed\":" + str(context.speed2) +", \"id\":2}"
    text4 = "{\"cmd\":\"setServoPos\",\"value\": " + str(target_angles[2]) + ",  \"speed\":" + str(context.speed3) +",\"id\":3}" 
    text5 = "{\"cmd\":\"setServoPos\",\"value\": " + str(target_angles[3]) + ",  \"speed\":" + str(context.speed4) +",\"id\":4}"
    text6 = "{\"cmd\":\"end\”}"

    """
    env.writeText2SerialPort(context, text1)  
    env.writeText2SerialPort(context, text2)#1
    time.sleep(time1)
    env.writeText2SerialPort(context, text4)#motor 3
    time.sleep(time3)  
    env.writeText2SerialPort(context, text5)#motor 4 first to avoid collision 
    time.sleep(time4)
    env.writeText2SerialPort(context, text3)#motor 2 first to avoid collision 
    time.sleep(time2)
    env.writeText2SerialPort(context, text6)
    
    

    #print('The robot %s moves to position %s' %(identifier, str(position))) 
    print("target_angles[1]", target_angles[1])
    print("target_angles[2]", target_angles[2])
    print("target_angles[3]", target_angles[3])
    
    
    
    """
    
    env.writeText2SerialPort(context, text1)  
    env.writeText2SerialPort(context, text2)#1
    time.sleep(2)
    env.writeText2SerialPort(context, text4)#motor 3
    time.sleep(2)  
    env.writeText2SerialPort(context, text5)#motor 4 first to avoid collision 
    time.sleep(2)
    env.writeText2SerialPort(context, text3)#motor 2 first to avoid collision 
    time.sleep(2)
    env.writeText2SerialPort(context, text6)
    

    


#raise behave.SkipScenario("Skipping scenario because condition is not met")
@when('the robot "{identifier1}" {action} the object "{identifier2}"')
def step_impl(context, identifier1 :str, identifier2:str, action):
    
    #we want to activate the relay
    relayValue = env.askArduinoRelayValue(context)  
     
    if (action == "grabs" ):#check if the action is grabing
        if(relayValue == "false" ):
            #we activate the magnet
            text = "{\"cmd\":\"setRelay\",\"value\":true}"
            env.writeText2SerialPort(context, text)
            
            #check if it worked:
            relayValueAgain = env.askArduinoRelayValue(context) 
            
            if(relayValueAgain == "true"):
                #update value in JSON file
                env.setJsonMagnetValue(context, "ON")


@given('the object "{identifier}" is {state}')
@then('the object "{identifier}" is {state}')
def step_impl(context, identifier : str, state):
    
    magnet_state = env.readJsonMagnetValue(context)
    
    if (state == "grabbed"):#State magnet ON if OFF
        
        if(magnet_state != "ON" ):
            # we reactivate the magnet
            text = "{\"cmd\":\"setRelay\",\"value\":true}"
            env.writeText2SerialPort(context, text)
            time.sleep(2)
            #update value in JSON file
            env.setJsonMagnetValue(context, "ON")
            
    if (state == "released"):
      
        text = "{\"cmd\":\"setRelay\",\"value\":false}"
        env.writeText2SerialPort(context, text)
        time.sleep(2)
        #check if it worked and update context variable
        relayValue = env.askArduinoRelayValue(context)
        
        if(relayValue == "false"):
            env.setJsonMagnetValue(context, "OFF")#update context variable   
    
    if (state == "sensed"):#save the color
        
        r_value = env.askArduinoColorValues(context)[0]
        g_value = env.askArduinoColorValues(context)[1]
        b_value = env.askArduinoColorValues(context)[2]
        
        if(r_value > g_value and r_value > b_value):
            print("The object is red")#save it to context variable
            env.setJsonColorValue(context,"red")
        elif(g_value > r_value and g_value > b_value):
            print("The object is green")
            env.setJsonColorValue(context,"green")
        elif(b_value > r_value and b_value > g_value):
            print("The object is blue")
            env.setJsonColorValue(context,"blue")



@given(u'the color of the object "{identifier}" is "{color_state}"')
def step_impl(context, identifier : str, color_state):
    
    detected_color_obj = env.readJsonColorValue(context)
    #if it is not the color sensed
    if(detected_color_obj != color_state):
        context.scenario.skip("Skipping scenario because condition is not met")
        #raise NotImplementedError("The sensor detected the color %s but the object is %s" % (context.obj_color, color_state))



"""
@given(u'the position of the robot "{identifier}" is "{position}"')
def step_impl(context, identifier : str, position):
    
    angle1 = env.askArduinoMotorValues(context, 1)#value motor1
    angle2 = env.askArduinoMotorValues(context, 2)#value motor2
    angle3 = env.askArduinoMotorValues(context, 3)#value motor3
    angle4 = env.askArduinoMotorValues(context, 4)#value motor3
    
    #check if we are in the right position    
    angle_values = env.position2MotorValues(position)
    target_angle1 = angle_values[0]
    target_angle2 = angle_values[1]
    target_angle3 = angle_values[2]
    target_angle4 = angle_values[3]
    
    #move to the right position 
    if (target_angle1 != actual_angle1):#check first angle
        text = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angle1) + ", \"speed\":context.speed, \"id\":1}"
        env.writeText2SerialPort(context, text)
            
    #move to the right position 
    if (target_angle2 != actual_angle2):#check first angle
        text = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angle2) + ", \"speed\":context.speed, \"id\":2}"
        env.writeText2SerialPort(context, text)
    
    #move to the right position 
    if (target_angle3 != actual_angle3):#check first angle
        text = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angle3) + ", \"speed\":context.speed, \"id\":3}"
        env.writeText2SerialPort(context, text)
        
    #move to the right position 
    if (target_angle4 != actual_angle4):#check first angle
        text = "{\"cmd\": \"setServoPos\",\"value\":" + str(target_angle4) + ", \"speed\":context.speed, \"id\":4}"
        env.writeText2SerialPort(context, text)
    

@given(u'the magnet "{identifier}" is {state}') 
def step_impl(context, identifier : str, state):
    
    
    #we want the relay value
    relayValue = env.askArduinoRelayValue(context)
    
    if (relayValue != state ):#check if magnet is in the correct state mode, otherwise change 
        if(state == "ON" ):#check if magnet "ON" otherwise activates the magnet
            text = "{\"cmd\":\"setRelay\",\"value\":true}"
            env.writeText2SerialPort(context, text)
            
        elif (state == "OFF" ):#check if magnet "ON" otherwise activates the magnet
            #print('The magnet is OFF')
            text = "{\"cmd\":\"setRelay\",\"value\":false}"
            env.writeText2SerialPort(context, text)
            
    


@when(u'the magnet "{identifier}" {action}')
def step_impl(context, identifier : str, action):
    if (action == "activates"):#we activate the magnet
        text = "{\"cmd\":\"setRelay\",\"value\":true}"
        env.writeText2SerialPort(context, text)
    
    elif (action == "deactivates"):#we deactivate the magnet
        text = "{\"cmd\":\"setRelay\",\"value\":false}"
        env.writeText2SerialPort(context, text)


    

@then(u'the object "{identifier}" is {state}')
@given(u'the object "{identifier}" is {state}')
def step_impl(context, identifier : str, state):

       
    #state related to color
    if(state == "green" or state == "red" or state == "blue"):
        if(context.obj_color == state): #check if the color of the object 
            pass
        else :
            pass
            #raise NotImplementedError('The color of object %s is %s but the sensor detected %s)' %(identifier, state, context.obj_color))
         
    elif(state == "assembled" or state == "sorted" or state == "sensed" ):#check that the object is place in zoneA, here only prints message and not checking 
        print(('The object %s is %s !' %(identifier, state)))


@when(u'the sensor "Sensor" scans')
#@when(u'the sensor "{identifier}" {action} the object "{identifier2}"')
def step_impl(context):
    
    command = "{\"cmd\": \"getColor\"}"
    env.writeText2SerialPort(context, command)
    # Read the response from the serial port
    json_response = env.readTextFromSerialPort(context)

    
    # Convert the JSON response to a Python dictionary
    response_dict = json.loads(json_response)

    # Extract the "value" from the response
    r_value = response_dict.get("r")
    g_value = response_dict.get("g")
    b_value = response_dict.get("b")
    if(r_value > g_value and r_value > b_value):
        context.obj_color = "red"
    elif(g_value > r_value and g_value > b_value):
        context.obj_color = "green"
    elif(b_value > r_value and b_value > g_value):
        context.obj_color = "blue"

    


@given(u'the object "{identifier}" is {state}')
@then(u'the object "{identifier}" is {state}')
def step_impl(context, identifier : str, state):
    if(state == "present"):
        print('The object %s is %s' %( identifier, state))
         
    elif(state == "green" ):#check that the object is place in zoneA, here only prints message and not checking 
        text = "{\"cmd\":\"getColor\"}\n"
        env.writeText2SerialPort(context, text)
        env.readTextFromSerialPort(context)


@when(u'the sensor "{identifier}" {action}')
def step_impl(context, identifier : str, action):
    if(action == "detects" ):#function for activating the detection form the sensor
        print('The "ColorSensor" detects')


@given(u'the magnet "{identifier}" is {state}') 
@then(u'the magnet "{identifier}" is {state}') 
def step_impl(context, identifier : str, state):
    if(state == "ON" ):#check if magnet "ON" otherwise activates the magnet
        #print('The magnet is ON')
        text = "{\"cmd\":\"setRelay\",\"value\":true}"
        env.writeText2SerialPort(context, text)
        
    elif (state == "OFF" ):#check if magnet "ON" otherwise activates the magnet
        #print('The magnet is OFF')
        text = "{\"cmd\":\"setRelay\",\"value\":false}"
        env.writeText2SerialPort(context, text)



@when(u'the magnet "{identifier}" {action}')
def step_impl(context, identifier : str, action):
    if (action == "activates"):#we activate the magnet
        #print('The magnet activates')
        text = "{\"cmd\":\"setRelay\",\"value\":true}"
        env.writeText2SerialPort(context, text)


@given(u'the signal of the button "{identifier}" is {state}') 
def step_impl(context, identifier : str, state):
    if (state == "ON"):#we activate the magnet
        print('The button "ready" is ON')


#for verifying the position of the robot is correct, otherwise we move or stop program
@given(u'the position of the robot "{identifier}" is "{position}"')
@then(u'the position of the robot "{identifier}" is "{position}"')
def step_impl(context, identifier : str, position):
    #if actual_position == position, print otherwise stop
    #print(' The position of the robot %s is %s' %(identifier, str(position))) 
    text = "{\"cmd\":\"getServoPos\",\"id\":1}"
    env.writeText2SerialPort(context, text)
    env.readTextFromSerialPort(context) 
    
    

@when('the robot "{identifier}" moves to position "{position}"')
def step_when(context, identifier : str, position):
    #move the robot
    text = "{\"cmd\":\"setServoPos\",\"value\":460,\"time\":context.speed, \"id\":1}"
    env.writeText2SerialPort(context, text)
    #print('The robot %s moves to position %s' %(identifier, str(position))) 
    
"""